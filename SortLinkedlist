class Node {
    int data;
    Node next;
    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}
class LinkedList {
    Node head;
    // Function to insert a new node at the end of the list
    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
    }
    // Function to sort the linked list using Insertion Sort
    public void insertionSort() {
        if (head == null || head.next == null) {
            return; // List is empty or has one element
        }
        Node sortedList = null; // Start with an empty sorted list
        Node current = head; // Current node to be inserted
        while (current != null) {
            // Store next node for the next iteration
            Node nextNode = current.next;
            // Insert current in sorted order
            sortedList = sortedInsert(sortedList, current);
            // Move to the next node
            current = nextNode;
        }
        head = sortedList; // Update head to point to the new sorted list
    }
    // Function to insert a node in the sorted linked list
    private Node sortedInsert(Node sortedList, Node newNode) {
        if (sortedList == null || sortedList.data >= newNode.data) {
            newNode.next = sortedList;
            return newNode;
        } else {
            Node current = sortedList;
            while (current.next != null && current.next.data < newNode.data) {
                current = current.next;
            }
            newNode.next = current.next;
            current.next = newNode;
        }
        return sortedList;
    }
    // Function to print the linked list
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        // Inserting elements into the linked list
        list.insert(30);
        list.insert(20);
        list.insert(50);
        list.insert(10);
        System.out.println("Original Linked List:");
        list.printList();
        // Sorting the linked list
        list.insertionSort();
        System.out.println("Sorted Linked List:");
        list.printList();
    }
}
